<!-- Consultation Modal -->
<div id="consultation-modal" class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden flex items-center justify-center p-4">
	<div class="bg-white rounded-lg max-w-4xl w-full max-h-[90vh] overflow-y-auto">
		<div class="sticky top-0 bg-white border-b border-gray-200 p-4 flex justify-between items-center">
			<h2 class="text-2xl font-bold text-gray-900">Schedule Your Free Consultation</h2>
			<button onclick="closeConsultationModal()" class="text-gray-400 hover:text-gray-600 text-2xl">&times;</button>
		</div>
		
		<div class="p-6">
			<div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
				<div>
					<h3 class="text-xl font-semibold text-gray-900 mb-6">What to Expect</h3>
					<ul class="space-y-4">
						<li class="flex items-start">
							<svg class="w-5 h-5 text-purple-500 mr-3 mt-1 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
								<path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
							</svg>
							<span class="text-gray-700">30-minute confidential conversation</span>
						</li>
						<li class="flex items-start">
							<svg class="w-5 h-5 text-purple-500 mr-3 mt-1 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
								<path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
							</svg>
							<span class="text-gray-700">Discussion of your goals and intentions</span>
						</li>
						<li class="flex items-start">
							<svg class="w-5 h-5 text-purple-500 mr-3 mt-1 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
								<path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
							</svg>
							<span class="text-gray-700">Overview of our process and approach</span>
						</li>
						<li class="flex items-start">
							<svg class="w-5 h-5 text-purple-500 mr-3 mt-1 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
								<path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
							</svg>
							<span class="text-gray-700">Initial eligibility assessment</span>
						</li>
						<li class="flex items-start">
							<svg class="w-5 h-5 text-purple-500 mr-3 mt-1 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
								<path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
							</svg>
							<span class="text-gray-700">Answers to all your questions</span>
						</li>
						<li class="flex items-start">
							<svg class="w-5 h-5 text-purple-500 mr-3 mt-1 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
								<path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
							</svg>
							<span class="text-gray-700">Next steps if you decide to proceed</span>
						</li>
					</ul>
				</div>

				<div class="bg-purple-50 p-6 rounded-lg">
					<h3 class="text-xl font-semibold text-gray-900 mb-6">Book Your Consultation</h3>
					<form id="consultation-form" class="space-y-4" onsubmit="handleConsultationBooking(event)">
						<div>
							<label for="name" class="block text-sm font-medium text-gray-700 mb-2">Full Name *</label>
							<input
								type="text"
								id="name"
								name="name"
								autocomplete="name"
								required
								class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent"
								placeholder="Enter your full name"
							>
							<div id="name-error" class="text-red-500 text-sm mt-1 hidden"></div>
						</div>
						<div>
							<label for="email" class="block text-sm font-medium text-gray-700 mb-2">Email Address *</label>
							<input
								type="email"
								id="email"
								name="email"
								autocomplete="email"
								required
								class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent"
								placeholder="your@email.com"
							>
							<div id="email-error" class="text-red-500 text-sm mt-1 hidden"></div>
						</div>
						<div>
							<label for="phone" class="block text-sm font-medium text-gray-700 mb-2">Phone Number *</label>
							<input
								type="tel"
								id="phone"
								name="phone"
								autocomplete="tel"
								required
								class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent"
								placeholder="(555) 123-4567"
							>
							<div id="phone-error" class="text-red-500 text-sm mt-1 hidden"></div>
						</div>
						<div>
							<label for="location" class="block text-sm font-medium text-gray-700 mb-2">Location *</label>
							<select
								id="location"
								name="location"
								autocomplete="address-level1"
								required
								class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent"
							>
								<option value="">Select your state</option>
								<option value="oregon">Oregon</option>
								<option value="colorado">Colorado</option>
								<option value="other">Other</option>
							</select>
							<div id="location-error" class="text-red-500 text-sm mt-1 hidden"></div>
						</div>
						<div>
							<label for="age" class="block text-sm font-medium text-gray-700 mb-2">Age *</label>
							<select
								id="age"
								name="age"
								autocomplete="off"
								required
								class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent"
							>
								<option value="">Select age range</option>
								<option value="18-20">18-20 (Not eligible - must be 21+)</option>
								<option value="21-30">21-30</option>
								<option value="31-40">31-40</option>
								<option value="41-50">41-50</option>
								<option value="51-60">51-60</option>
								<option value="61+">61+</option>
							</select>
							<div id="age-error" class="text-red-500 text-sm mt-1 hidden"></div>
						</div>
						<div>
							<label for="experience" class="block text-sm font-medium text-gray-700 mb-2">Previous Psychedelic Experience</label>
							<select
								id="experience"
								name="experience"
								autocomplete="off"
								class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent"
							>
								<option value="">Select experience level</option>
								<option value="none">No previous experience</option>
								<option value="minimal">Minimal (1-2 times)</option>
								<option value="moderate">Moderate (several times)</option>
								<option value="extensive">Extensive experience</option>
							</select>
						</div>
						<div>
							<label for="preferred-time" class="block text-sm font-medium text-gray-700 mb-2">Preferred Consultation Time</label>
							<select
								id="preferred-time"
								name="preferred-time"
								autocomplete="off"
								class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent"
							>
								<option value="">Select preferred time</option>
								<option value="morning">Morning (9 AM - 12 PM)</option>
								<option value="afternoon">Afternoon (12 PM - 5 PM)</option>
								<option value="evening">Evening (5 PM - 8 PM)</option>
								<option value="flexible">I'm flexible</option>
							</select>
						</div>
						<div>
							<label for="message" class="block text-sm font-medium text-gray-700 mb-2">Brief Message (Optional)</label>
							<textarea
								id="message"
								name="message"
								rows="3"
								autocomplete="off"
								class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent"
								placeholder="Tell us briefly about your interest in psychedelic therapy, any specific goals, or questions you have..."
							></textarea>
						</div>
						<div class="flex items-start">
							<input
								type="checkbox"
								id="consent"
								name="consent"
								required
								class="mt-1 mr-3"
							>
							<label for="consent" class="text-sm text-gray-600">
								I understand this is a preliminary consultation and does not guarantee eligibility for services. I consent to being contacted about psychedelic therapy services. *
							</label>
						</div>
						<div id="consent-error" class="text-red-500 text-sm hidden"></div>
						<input type="hidden" name="webhook_url" value="https://n8n.srv874889.hstgr.cloud/webhook/b1fc5008-d10f-42f0-92aa-91d8a3806319">
						<button
							type="submit"
							id="submit-btn"
							class="w-full bg-purple-600 hover:bg-purple-500 text-white font-semibold py-3 px-6 rounded-lg transition duration-300 flex items-center justify-center"
						>
							<span id="submit-text">Schedule Free Consultation</span>
							<svg id="loading-spinner" class="animate-spin -mr-1 ml-3 h-5 w-5 text-white hidden" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
								<circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
								<path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
							</svg>
						</button>
					</form>
					<p class="text-sm text-gray-600 mt-4 text-center">
						We'll contact you within 24 hours to schedule your consultation.
					</p>
				</div>
			</div>
		</div>
	</div>
</div>

<script>
	// Modal control functions
	function openConsultationModal() {
		const modal = document.getElementById('consultation-modal');
		if (modal) {
			modal.classList.remove('hidden');
			document.body.style.overflow = 'hidden'; // Prevent background scrolling
		}
	}
	
	function closeConsultationModal() {
		const modal = document.getElementById('consultation-modal');
		if (modal) {
			modal.classList.add('hidden');
			document.body.style.overflow = ''; // Restore scrolling
			
			// Clear form when closing
			const form = document.getElementById('consultation-form') as HTMLFormElement;
			if (form) {
				form.reset();
				clearErrors();
			}
		}
	}
	
	// Form handling functions
	async function handleConsultationBooking(event: Event) {
		event.preventDefault();
		
		const form = event.target as HTMLFormElement;
		const formData = new FormData(form);
		
		// Clear previous errors
		clearErrors();
		
		// Validate form
		if (!validateForm(formData)) {
			return;
		}
		
		// Show loading state
		showLoadingState();
		
		try {
			// Submit to n8n webhook directly
			const webhookUrl = formData.get('webhook_url') as string;
			formData.delete('webhook_url'); // Remove webhook_url from data sent to n8n
			const response = await fetch(webhookUrl, {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json',
				},
				body: JSON.stringify(Object.fromEntries(formData.entries()))
			});
			
			const result = await response.json();
			
			if (response.ok && result.success) {
				// Hide loading state
				hideLoadingState();
				
				// Redirect to scheduling page with form data
				const params = new URLSearchParams();
				
				// Map form fields to expected parameters
				const name = formData.get('name');
				const email = formData.get('email'); 
				const phone = formData.get('phone');
				const location = formData.get('location');
				const age = formData.get('age');
				const experience = formData.get('experience');
				const preferredTime = formData.get('preferred-time');
				const message = formData.get('message');
				
				// Build comprehensive message with all form data
				let fullMessage = '';
				if (message) {
					fullMessage += `${message}`;
				}
				
				// Add the mapped parameters
				if (name) params.append('name', name.toString());
				if (email) params.append('email', email.toString());
				if (phone) params.append('phone', phone.toString());
				params.append('inquiry_type', 'consultation');
				if (fullMessage.trim()) params.append('message', fullMessage.trim());
				
				// Debug: Log the URL being generated
				const redirectUrl = `/schedule-consultation?${params.toString()}`;
				console.log('Redirecting to:', redirectUrl);
				console.log('Parameters:', {
					name: name?.toString(),
					email: email?.toString(), 
					phone: phone?.toString(),
					message: fullMessage.trim()
				});
				
				// Store debug info in sessionStorage for persistence
				sessionStorage.setItem('formDebug', JSON.stringify({
					redirectUrl,
					parameters: {
						name: name?.toString(),
						email: email?.toString(), 
						phone: phone?.toString(),
						message: fullMessage.trim()
					}
				}));
				
				// Redirect immediately
				window.location.href = redirectUrl;
			} else {
				throw new Error(result.error || 'Failed to submit form');
			}
		} catch (error) {
			console.error('Form submission error:', error);
			
			// Hide loading state
			hideLoadingState();
			
			// Show error message
			showErrorMessage('There was an error submitting your request. Please try again or contact us directly.');
		}
	}
	
	function validateForm(formData: FormData): boolean {
		let isValid = true;
		
		// Validate name
		const name = formData.get('name') as string;
		if (!name || name.trim().length < 2) {
			showError('name-error', 'Please enter your full name (at least 2 characters)');
			isValid = false;
		}
		
		// Validate email
		const email = formData.get('email') as string;
		const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
		if (!email || !emailRegex.test(email)) {
			showError('email-error', 'Please enter a valid email address');
			isValid = false;
		}
		
		// Validate phone (if provided)
		const phone = formData.get('phone') as string;
		if (phone) {
			const phoneRegex = /^[\+]?[1-9][\d]{0,15}$/;
			const cleanPhone = phone.replace(/[\s\-\(\)]/g, '');
			if (!phoneRegex.test(cleanPhone) || cleanPhone.length < 10) {
				showError('phone-error', 'Please enter a valid phone number');
				isValid = false;
			}
		}
		
		// Validate location
		const location = formData.get('location') as string;
		if (!location) {
			showError('location-error', 'Please select your state');
			isValid = false;
		}
		
		// Validate age
		const age = formData.get('age') as string;
		if (!age) {
			showError('age-error', 'Please select your age range');
			isValid = false;
		} else if (age === '18-20') {
			showError('age-error', 'You must be 21 or older to be eligible for our services');
			isValid = false;
		}
		
		// Validate consent
		const consent = formData.get('consent');
		if (!consent) {
			showError('consent-error', 'Please acknowledge the consent statement');
			isValid = false;
		}
		
		return isValid;
	}
	
	function showError(elementId: string, message: string) {
		const errorElement = document.getElementById(elementId);
		if (errorElement) {
			errorElement.textContent = message;
			errorElement.classList.remove('hidden');
		}
		
		// Also highlight the input field
		const inputId = elementId.replace('-error', '');
		const inputElement = document.getElementById(inputId);
		if (inputElement) {
			inputElement.classList.add('border-red-500');
			inputElement.classList.remove('border-gray-300');
		}
	}
	
	function clearErrors() {
		const errorElements = document.querySelectorAll('[id$="-error"]');
		errorElements.forEach(element => {
			element.classList.add('hidden');
			element.textContent = '';
		});
		
		// Remove error styling from inputs
		const inputs = document.querySelectorAll('input, select, textarea');
		inputs.forEach(input => {
			input.classList.remove('border-red-500');
			input.classList.add('border-gray-300');
		});
	}
	
	function showLoadingState() {
		const submitBtn = document.getElementById('submit-btn');
		const submitText = document.getElementById('submit-text');
		const loadingSpinner = document.getElementById('loading-spinner');
		
		if (submitBtn && submitText && loadingSpinner) {
			submitBtn.setAttribute('disabled', 'true');
			submitBtn.classList.add('opacity-75', 'cursor-not-allowed');
			submitText.textContent = 'Submitting...';
			loadingSpinner.classList.remove('hidden');
		}
	}
	
	function hideLoadingState() {
		const submitBtn = document.getElementById('submit-btn');
		const submitText = document.getElementById('submit-text');
		const loadingSpinner = document.getElementById('loading-spinner');
		
		if (submitBtn && submitText && loadingSpinner) {
			submitBtn.removeAttribute('disabled');
			submitBtn.classList.remove('opacity-75', 'cursor-not-allowed');
			submitText.textContent = 'Schedule Free Consultation';
			loadingSpinner.classList.add('hidden');
		}
	}
	
	function showSuccessMessage() {
		// Create success modal
		const modal = document.createElement('div');
		modal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';
		modal.innerHTML = `
			<div class="bg-white rounded-lg p-8 max-w-md mx-4 text-center">
				<div class="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
					<svg class="w-8 h-8 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
					</svg>
				</div>
				<h3 class="text-2xl font-bold text-gray-900 mb-4">Consultation Request Submitted!</h3>
				<p class="text-gray-600 mb-6">
					Thank you for your interest in our services. We'll review your information and contact you within 24 hours to schedule your free consultation.
				</p>
				<div class="space-y-3">
					<p class="text-sm text-gray-500">
						<strong>Next steps:</strong>
					</p>
					<ul class="text-sm text-gray-600 text-left space-y-1">
						<li>• Check your email for a confirmation message</li>
						<li>• We'll call or email to schedule your consultation</li>
						<li>• Consider taking our <a href="/readiness-assessment" class="text-purple-600 hover:text-purple-800">readiness assessment</a></li>
					</ul>
				</div>
				<button
					onclick="closeSuccessModal()"
					class="mt-6 bg-purple-600 hover:bg-purple-500 text-white font-semibold py-2 px-6 rounded-lg transition duration-300"
				>
					Close
				</button>
			</div>
		`;
		
		document.body.appendChild(modal);
	}
	
	function closeSuccessModal() {
		const modal = document.querySelector('.fixed.inset-0.bg-black.bg-opacity-50');
		if (modal) {
			modal.remove();
		}
		window.location.replace('/readiness-assessment');
	}
	
	function showErrorMessage(message: string) {
		// Create error modal
		const modal = document.createElement('div');
		modal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';
		modal.innerHTML = `
			<div class="bg-white rounded-lg p-8 max-w-md mx-4 text-center">
				<div class="w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4">
					<svg class="w-8 h-8 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
					</svg>
				</div>
				<h3 class="text-2xl font-bold text-red-900 mb-4">Submission Error</h3>
				<p class="text-red-700 mb-6">
					${message}
				</p>
				<div class="space-y-3">
					<p class="text-sm text-red-600">
						<strong>You can also contact us directly:</strong>
					</p>
					<p class="text-sm text-gray-600">
						Email: wayne@disendarkenment.com<br>
						Phone: (904) 561-0301
					</p>
				</div>
				<button
					onclick="closeErrorModal()"
					class="mt-6 bg-red-600 hover:bg-red-500 text-white font-semibold py-2 px-6 rounded-lg transition duration-300"
				>
					Close
				</button>
			</div>
		`;
		
		document.body.appendChild(modal);
	}
	
	function closeErrorModal() {
		const modal = document.querySelector('.fixed.inset-0.bg-black.bg-opacity-50');
		if (modal) {
			modal.remove();
		}
		window.location.replace('/readiness-assessment');
	}
	
	// Add real-time validation
	document.addEventListener('DOMContentLoaded', function() {
		const modal = document.getElementById('consultation-modal');
		if (modal) {
			modal.addEventListener('click', function(event) {
				if (event.target === modal) {
					closeConsultationModal();
				}
			});
		}
		
		// Close modal with Escape key
		document.addEventListener('keydown', function(event) {
			if (event.key === 'Escape') {
				closeConsultationModal();
			}
		});
		
		const form = document.getElementById('consultation-form');
		if (!form) return;
		
		// Add input event listeners for real-time validation
		const inputs = form.querySelectorAll('input, select, textarea');
		inputs.forEach(input => {
			input.addEventListener('blur', function() {
				validateSingleField(this);
			});
			
			input.addEventListener('input', function() {
				// Clear error when user starts typing
				const errorId = this.id + '-error';
				const errorElement = document.getElementById(errorId);
				if (errorElement && !errorElement.classList.contains('hidden')) {
					errorElement.classList.add('hidden');
					this.classList.remove('border-red-500');
					this.classList.add('border-gray-300');
				}
			});
		});
		
		// Age selection warning
		const ageSelect = document.getElementById('age') as HTMLSelectElement;
		if (ageSelect) {
			ageSelect.addEventListener('change', function() {
				if (this.value === '18-20') {
					showError('age-error', 'You must be 21 or older to be eligible for our services');
				}
			});
		}
	});
	
	function validateSingleField(field: HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement) {
		const fieldName = field.name;
		const value = field.value.trim();
		const errorId = field.id + '-error';
		
		// Clear previous error
		const errorElement = document.getElementById(errorId);
		if (errorElement) {
			errorElement.classList.add('hidden');
		}
		field.classList.remove('border-red-500');
		field.classList.add('border-gray-300');
		
		// Validate based on field type
		switch (fieldName) {
			case 'name':
				if (value.length < 2) {
					showError(errorId, 'Name must be at least 2 characters');
				}
				break;
			case 'email':
				const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
				if (value && !emailRegex.test(value)) {
					showError(errorId, 'Please enter a valid email address');
				}
				break;
			case 'phone':
				if (value) {
					const phoneRegex = /^[\+]?[1-9][\d]{0,15}$/;
					const cleanPhone = value.replace(/[\s\-\(\)]/g, '');
					if (!phoneRegex.test(cleanPhone) || cleanPhone.length < 10) {
						showError(errorId, 'Please enter a valid phone number');
					}
				}
				break;
		}
	}

	// Make functions available globally
	(window as any).handleConsultationBooking = handleConsultationBooking;
	(window as any).closeSuccessModal = closeSuccessModal;
	(window as any).closeErrorModal = closeErrorModal;
	(window as any).openConsultationModal = openConsultationModal;
	(window as any).closeConsultationModal = closeConsultationModal;
</script>