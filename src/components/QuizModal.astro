---
export interface Props {
  triggerText?: string;
  triggerClass?: string;
}

const { 
  triggerText = "Take the Readiness Quiz", 
  triggerClass = "bg-purple-600 hover:bg-purple-500 text-white font-semibold py-3 px-6 rounded-lg transition duration-300"
} = Astro.props;
---

<div class="quiz-modal-container">
  <!-- Trigger Button -->
  <button 
    class={`quiz-trigger ${triggerClass}`}
    data-quiz-trigger
    aria-label="Open readiness assessment quiz"
  >
    {triggerText}
  </button>

  <!-- Modal Overlay -->
  <div 
    class="quiz-modal-overlay fixed inset-0 bg-black bg-opacity-50 z-50 hidden items-center justify-center p-4"
    data-quiz-overlay
    role="dialog"
    aria-modal="true"
    aria-labelledby="quiz-title"
  >
    <div class="quiz-modal bg-white rounded-lg max-w-2xl w-full max-h-[90vh] overflow-hidden">
      <!-- Modal Header -->
      <div class="quiz-header bg-gradient-to-r from-purple-600 to-indigo-600 text-white p-6">
        <div class="flex justify-between items-center">
          <h2 id="quiz-title" class="text-2xl font-bold">Psychedelic Therapy Readiness Quiz</h2>
          <button 
            class="quiz-close text-white hover:text-gray-200 text-2xl font-bold"
            data-quiz-close
            aria-label="Close quiz"
          >
            Ã—
          </button>
        </div>
        <div class="mt-4">
          <div class="quiz-progress bg-white bg-opacity-20 rounded-full h-2">
            <div 
              class="quiz-progress-bar bg-white h-2 rounded-full transition-all duration-300"
              data-quiz-progress
              style="width: 0%"
            ></div>
          </div>
          <p class="text-sm mt-2" data-quiz-counter>Question 1 of 10</p>
        </div>
      </div>

      <!-- Modal Content -->
      <div class="quiz-content p-6 overflow-y-auto max-h-[calc(90vh-120px)]">
        <!-- Questions will be dynamically loaded here -->
      </div>

      <!-- Modal Footer -->
      <div class="quiz-footer p-6 border-t border-gray-200">
        <div class="flex justify-between">
          <button 
            class="quiz-prev bg-gray-200 hover:bg-gray-300 text-gray-700 font-semibold py-2 px-4 rounded-lg transition duration-300 disabled:opacity-50 disabled:cursor-not-allowed"
            data-quiz-prev
            disabled
          >
            Previous
          </button>
          <button 
            class="quiz-next bg-purple-600 hover:bg-purple-500 text-white font-semibold py-2 px-4 rounded-lg transition duration-300 disabled:opacity-50 disabled:cursor-not-allowed"
            data-quiz-next
            disabled
          >
            Next
          </button>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  .quiz-modal-overlay {
    backdrop-filter: blur(4px);
  }
  
  .quiz-modal {
    animation: modalSlideIn 0.3s ease-out;
  }
  
  @keyframes modalSlideIn {
    from {
      opacity: 0;
      transform: translateY(-20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  .quiz-option {
    transition: all 0.2s ease;
  }
  
  .quiz-option:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }
  
  .quiz-option.selected {
    border-color: #7c3aed;
    background-color: #f3e8ff;
  }
</style>

<script>
  // @ts-nocheck
  import { quizQuestions, calculateScore, formatScore } from '../lib/quiz-logic.js';

  class QuizModal {
    constructor(container) {
      this.container = container;
      this.currentQuestionIndex = 0;
      this.answers = {};
      this.isOpen = false;
      
      this.init();
    }

    init() {
      this.bindEvents();
    }

    bindEvents() {
      // Trigger button
      const trigger = this.container.querySelector('[data-quiz-trigger]');
      trigger?.addEventListener('click', () => this.open());

      // Close button
      const closeBtn = this.container.querySelector('[data-quiz-close]');
      closeBtn?.addEventListener('click', () => this.close());

      // Overlay click to close
      const overlay = this.container.querySelector('[data-quiz-overlay]');
      overlay?.addEventListener('click', (e) => {
        if (e.target === overlay) this.close();
      });

      // Navigation buttons
      const prevBtn = this.container.querySelector('[data-quiz-prev]');
      prevBtn?.addEventListener('click', () => this.previousQuestion());

      const nextBtn = this.container.querySelector('[data-quiz-next]');
      nextBtn?.addEventListener('click', () => this.nextQuestion());

      // Keyboard navigation
      document.addEventListener('keydown', (e) => {
        if (!this.isOpen) return;
        
        if (e.key === 'Escape') this.close();
        if (e.key === 'ArrowLeft') this.previousQuestion();
        if (e.key === 'ArrowRight') this.nextQuestion();
      });
    }

    open() {
      const overlay = this.container.querySelector('[data-quiz-overlay]');
      overlay?.classList.remove('hidden');
      overlay?.classList.add('flex');
      
      this.isOpen = true;
      this.currentQuestionIndex = 0;
      this.answers = {};
      
      this.renderQuestion();
      this.updateProgress();
      
      // Focus management
      const closeBtn = this.container.querySelector('[data-quiz-close]');
      closeBtn?.focus();
      
      // Prevent body scroll
      document.body.style.overflow = 'hidden';
    }

    close() {
      const overlay = this.container.querySelector('[data-quiz-overlay]');
      overlay?.classList.add('hidden');
      overlay?.classList.remove('flex');
      
      this.isOpen = false;
      
      // Restore body scroll
      document.body.style.overflow = '';
    }

    renderQuestion() {
      const content = this.container.querySelector('.quiz-content');
      if (!content) return;

      const question = quizQuestions[this.currentQuestionIndex];
      if (!question) return;

      content.innerHTML = `
        <div class="question-container">
          <h3 class="text-xl font-semibold text-gray-900 mb-2">${question.category}</h3>
          <p class="text-lg text-gray-700 mb-4">${question.question}</p>
          
          <div class="space-y-3">
            ${question.options.map((option, index) => `
              <label class="quiz-option block cursor-pointer">
                <input 
                  type="radio" 
                  name="${question.id}" 
                  value="${option.value}" 
                  class="sr-only"
                  ${this.answers[question.id] === option.value ? 'checked' : ''}
                >
                <div class="border-2 border-gray-200 rounded-lg p-4 hover:border-purple-300 transition-all">
                  <div class="font-semibold text-gray-900">${option.text}</div>
                </div>
              </label>
            `).join('')}
          </div>
        </div>
      `;

      // Add event listeners to options
      const options = content.querySelectorAll('.quiz-option');
      options.forEach((option, index) => {
        option.addEventListener('click', () => this.selectAnswer(question.id, question.options[index].value));
      });

      this.updateNavigation();
    }

    selectAnswer(questionId, value) {
      this.answers[questionId] = parseInt(value);
      this.updateNavigation();
      
      // Visual feedback
      const options = this.container.querySelectorAll('.quiz-option');
      options.forEach(option => option.classList.remove('selected'));
      
      const selectedOption = this.container.querySelector(`input[value="${value}"]`)?.closest('.quiz-option');
      selectedOption?.classList.add('selected');
    }

    updateNavigation() {
      const prevBtn = this.container.querySelector('[data-quiz-prev]');
      const nextBtn = this.container.querySelector('[data-quiz-next]');
      
      if (!prevBtn || !nextBtn) return;

      // Previous button
      prevBtn.disabled = this.currentQuestionIndex === 0;

      // Next button
      const currentQuestion = quizQuestions[this.currentQuestionIndex];
      const hasAnswer = this.answers[currentQuestion.id] !== undefined;
      
      if (this.currentQuestionIndex === quizQuestions.length - 1) {
        nextBtn.textContent = 'Get Results';
        nextBtn.disabled = !hasAnswer;
      } else {
        nextBtn.textContent = 'Next';
        nextBtn.disabled = !hasAnswer;
      }
    }

    nextQuestion() {
      if (this.currentQuestionIndex === quizQuestions.length - 1) {
        this.showResults();
        return;
      }

      if (this.currentQuestionIndex < quizQuestions.length - 1) {
        this.currentQuestionIndex++;
        this.renderQuestion();
        this.updateProgress();
      }
    }

    previousQuestion() {
      if (this.currentQuestionIndex > 0) {
        this.currentQuestionIndex--;
        this.renderQuestion();
        this.updateProgress();
      }
    }

    updateProgress() {
      const progressBar = this.container.querySelector('[data-quiz-progress]');
      const counter = this.container.querySelector('[data-quiz-counter]');
      
      if (progressBar) {
        const percentage = ((this.currentQuestionIndex + 1) / quizQuestions.length) * 100;
        progressBar.style.width = `${percentage}%`;
      }
      
      if (counter) {
        counter.textContent = `Question ${this.currentQuestionIndex + 1} of ${quizQuestions.length}`;
      }
    }

    showResults() {
      const score = calculateScore(this.answers);
      const formattedScore = formatScore(score);
      
      // Close quiz modal
      this.close();
      
      // Open results modal
      const resultsModal = document.querySelector('[data-results-modal]');
      if (resultsModal) {
        const modal = resultsModal.__modalInstance;
        if (modal) {
          modal.open(formattedScore, this.answers);
        }
      } else {
        // Fallback: redirect to full assessment
        window.location.href = '/readiness-assessment';
      }
    }
  }

  // Initialize all quiz modals on the page
  document.addEventListener('DOMContentLoaded', () => {
    const containers = document.querySelectorAll('.quiz-modal-container');
    containers.forEach(container => {
      container.__quizInstance = new QuizModal(container);
    });
  });

 