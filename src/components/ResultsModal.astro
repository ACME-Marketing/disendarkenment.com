---
export interface Props {
  showOnLoad?: boolean;
}

const { showOnLoad = false } = Astro.props;
---

<div class="results-modal-container" data-results-modal>
  <!-- Modal Overlay -->
  <div 
    class="results-modal-overlay fixed inset-0 bg-black bg-opacity-50 z-50 hidden items-center justify-center p-4"
    data-results-overlay
    role="dialog"
    aria-modal="true"
    aria-labelledby="results-title"
  >
    <div class="results-modal bg-white rounded-lg max-w-4xl w-full max-h-[90vh] overflow-hidden">
      <!-- Modal Header -->
      <div class="results-header bg-gradient-to-r from-green-600 to-blue-600 text-white p-6">
        <div class="flex justify-between items-center">
          <h2 id="results-title" class="text-2xl font-bold">Your Readiness Assessment Results</h2>
          <button 
            class="results-close text-white hover:text-gray-200 text-2xl font-bold"
            data-results-close
            aria-label="Close results"
          >
            Ã—
          </button>
        </div>
      </div>

      <!-- Modal Content -->
      <div class="results-content p-6 overflow-y-auto max-h-[calc(90vh-80px)]">
        <!-- Results will be dynamically loaded here -->
      </div>
    </div>
  </div>
</div>

<style>
  .results-modal-overlay {
    backdrop-filter: blur(4px);
  }
  
  .results-modal {
    animation: modalSlideIn 0.3s ease-out;
  }
  
  @keyframes modalSlideIn {
    from {
      opacity: 0;
      transform: translateY(-20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  .score-circle {
    width: 120px;
    height: 120px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 2rem;
    font-weight: bold;
  }
</style>

<script>
  // @ts-nocheck
  import { formatScore } from '../lib/quiz-logic.js';

  class ResultsModal {
    constructor(container) {
      this.container = container;
      this.isOpen = false;
      this.currentScore = null;
      this.currentAnswers = null;
      
      this.init();
    }

    init() {
      this.bindEvents();
    }

    bindEvents() {
      // Close button
      const closeBtn = this.container.querySelector('[data-results-close]');
      closeBtn?.addEventListener('click', () => this.close());

      // Overlay click to close
      const overlay = this.container.querySelector('[data-results-overlay]');
      overlay?.addEventListener('click', (e) => {
        if (e.target === overlay) this.close();
      });

      // Keyboard navigation
      document.addEventListener('keydown', (e) => {
        if (!this.isOpen) return;
        if (e.key === 'Escape') this.close();
      });
    }

    open(score, answers) {
      const overlay = this.container.querySelector('[data-results-overlay]');
      overlay?.classList.remove('hidden');
      overlay?.classList.add('flex');
      
      this.isOpen = true;
      this.currentScore = score;
      this.currentAnswers = answers;
      
      this.renderResults();
      
      // Focus management
      const closeBtn = this.container.querySelector('[data-results-close]');
      closeBtn?.focus();
      
      // Prevent body scroll
      document.body.style.overflow = 'hidden';
    }

    close() {
      const overlay = this.container.querySelector('[data-results-overlay]');
      overlay?.classList.add('hidden');
      overlay?.classList.remove('flex');
      
      this.isOpen = false;
      
      // Restore body scroll
      document.body.style.overflow = '';
    }

    renderResults() {
      const content = this.container.querySelector('.results-content');
      if (!content || !this.currentScore) return;

      const { totalScore, maxScore, percentage, level, recommendations } = this.currentScore;

      content.innerHTML = `
        <div class="results-container">
          <!-- Score Display -->
          <div class="text-center mb-8">
            <div class="score-circle ${level.bgColor} ${level.color} mx-auto mb-4">
              ${percentage}%
            </div>
            <h3 class="text-2xl font-bold text-gray-900 mb-2">${level.level} Readiness</h3>
            <p class="text-gray-600">${level.description}</p>
          </div>

          <!-- Score Breakdown -->
          <div class="bg-gray-50 rounded-lg p-6 mb-6">
            <h4 class="text-lg font-semibold text-gray-900 mb-4">Your Score Breakdown</h4>
            <div class="space-y-3">
              <div class="flex justify-between items-center">
                <span class="text-gray-700">Total Score:</span>
                <span class="font-semibold">${totalScore}/${maxScore}</span>
              </div>
              <div class="w-full bg-gray-200 rounded-full h-2">
                <div 
                  class="bg-gradient-to-r from-purple-500 to-blue-500 h-2 rounded-full transition-all duration-500"
                  style="width: ${percentage}%"
                ></div>
              </div>
            </div>
          </div>

          <!-- Recommendations -->
          ${recommendations.length > 0 ? `
            <div class="mb-6">
              <h4 class="text-lg font-semibold text-gray-900 mb-4">Personalized Recommendations</h4>
              <div class="space-y-4">
                ${recommendations.map(rec => `
                  <div class="border-l-4 ${rec.priority === 'high' ? 'border-red-500' : rec.priority === 'medium' ? 'border-yellow-500' : 'border-blue-500'} pl-4">
                    <h5 class="font-semibold text-gray-900">${rec.category}</h5>
                    <p class="text-gray-600 text-sm">${rec.suggestion}</p>
                  </div>
                `).join('')}
              </div>
            </div>
          ` : ''}

          <!-- Next Steps -->
          <div class="bg-purple-50 rounded-lg p-6 mb-6">
            <h4 class="text-lg font-semibold text-gray-900 mb-4">Next Steps</h4>
            <div class="space-y-3">
              <p class="text-gray-700">${level.action}</p>
              <div class="flex flex-col sm:flex-row gap-4">
                <button 
                  class="schedule-consultation bg-purple-600 hover:bg-purple-500 text-white font-semibold py-3 px-6 rounded-lg transition duration-300 w-full"
                  data-schedule-consultation
                >
                  Schedule Free Consultation
                </button>
                <button 
                  class="learn-more bg-white border border-purple-600 text-purple-600 hover:bg-purple-50 font-semibold py-3 px-6 rounded-lg transition duration-300 w-full"
                  data-learn-more
                >
                  Learn More About Services
                </button>
              </div>
            </div>
          </div>

          <!-- Consultation Form -->
          <div class="consultation-form-container">
            <h4 class="text-lg font-semibold text-gray-900 mb-4">Book Your Consultation</h4>
            <form class="consultation-form space-y-4" data-consultation-form>
              <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label for="consultation-name" class="block text-sm font-medium text-gray-700 mb-2">Full Name *</label>
                  <input
                    type="text"
                    id="consultation-name"
                    name="name"
                    required
                    class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                    placeholder="Enter your full name"
                  >
                </div>
                <div>
                  <label for="consultation-email" class="block text-sm font-medium text-gray-700 mb-2">Email Address *</label>
                  <input
                    type="email"
                    id="consultation-email"
                    name="email"
                    required
                    class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                    placeholder="your@email.com"
                  >
                </div>
              </div>
              
              <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label for="consultation-phone" class="block text-sm font-medium text-gray-700 mb-2">Phone Number</label>
                  <input
                    type="tel"
                    id="consultation-phone"
                    name="phone"
                    class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                    placeholder="(555) 123-4567"
                  >
                </div>
                <div>
                  <label for="consultation-location" class="block text-sm font-medium text-gray-700 mb-2">Location *</label>
                  <select
                    id="consultation-location"
                    name="location"
                    required
                    class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                  >
                    <option value="">Select your state</option>
                    <option value="oregon">Oregon</option>
                    <option value="colorado">Colorado</option>
                    <option value="other">Other</option>
                  </select>
                </div>
              </div>

              <div>
                <label for="consultation-message" class="block text-sm font-medium text-gray-700 mb-2">Brief Message (Optional)</label>
                <textarea
                  id="consultation-message"
                  name="message"
                  rows="3"
                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                  placeholder="Tell us briefly about your interest in psychedelic therapy..."
                ></textarea>
              </div>

              <div class="flex items-start">
                <input
                  type="checkbox"
                  id="consultation-consent"
                  name="consent"
                  required
                  class="mt-1 mr-3"
                >
                <label for="consultation-consent" class="text-sm text-gray-600">
                  I understand this is a preliminary consultation and does not guarantee eligibility for services. I consent to being contacted about psychedelic therapy services. *
                </label>
              </div>

              <button
                type="submit"
                class="submit-consultation w-full bg-purple-600 hover:bg-purple-500 text-white font-semibold py-3 px-6 rounded-lg transition duration-300 flex items-center justify-center"
              >
                <span class="submit-text">Schedule Free Consultation</span>
                <svg class="loading-spinner animate-spin -mr-1 ml-3 h-5 w-5 text-white hidden" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                  <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                  <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
              </button>
            </form>
          </div>
        </div>
      `;

      this.bindFormEvents();
    }

    bindFormEvents() {
      const form = this.container.querySelector('[data-consultation-form]');
      if (!form) return;

      form.addEventListener('submit', (e) => this.handleFormSubmit(e));

      // Button events
      const scheduleBtn = this.container.querySelector('[data-schedule-consultation]');
      scheduleBtn?.addEventListener('click', () => {
        const formSection = this.container.querySelector('.consultation-form-container');
        formSection?.scrollIntoView({ behavior: 'smooth' });
      });

      const learnMoreBtn = this.container.querySelector('[data-learn-more]');
      learnMoreBtn?.addEventListener('click', () => {
        window.location.href = '/services';
      });
    }

    async handleFormSubmit(e) {
      e.preventDefault();
      
      const form = e.target;
      const formData = new FormData(form);
      
      // Add quiz results
      formData.append('quiz_score', this.currentScore.percentage);
      formData.append('quiz_level', this.currentScore.level.level);
      
      // Show loading state
      const submitBtn = form.querySelector('.submit-consultation');
      const submitText = form.querySelector('.submit-text');
      const loadingSpinner = form.querySelector('.loading-spinner');
      
      submitBtn.disabled = true;
      submitText.textContent = 'Submitting...';
      loadingSpinner.classList.remove('hidden');

      try {
        const response = await fetch('/.netlify/functions/consultation', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            form_type: 'quiz_consultation',
            timestamp: new Date().toISOString(),
            data: {
              name: formData.get('name'),
              email: formData.get('email'),
              phone: formData.get('phone'),
              location: formData.get('location'),
              message: formData.get('message'),
              consent: formData.get('consent'),
              quiz_score: formData.get('quiz_score'),
              quiz_level: formData.get('quiz_level')
            }
          })
        });

        const result = await response.json();
        
        if (response.ok && result.success) {
          this.showSuccessMessage();
          form.reset();
        } else {
          throw new Error(result.error || 'Failed to submit form');
        }
      } catch (error) {
        console.error('Form submission error:', error);
        this.showErrorMessage('There was an error submitting your request. Please try again or contact us directly.');
      } finally {
        submitBtn.disabled = false;
        submitText.textContent = 'Schedule Free Consultation';
        loadingSpinner.classList.add('hidden');
      }
    }

    showSuccessMessage() {
      const content = this.container.querySelector('.results-content');
      if (!content) return;

      content.innerHTML = `
        <div class="text-center py-8">
          <div class="w-20 h-20 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
            <svg class="w-10 h-10 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
            </svg>
          </div>
          <h3 class="text-2xl font-bold text-gray-900 mb-4">Consultation Request Submitted!</h3>
          <p class="text-gray-600 mb-6">
            Thank you for completing the readiness assessment. We'll review your information and contact you within 24 hours to schedule your free consultation.
          </p>
          <div class="space-y-3 text-sm text-gray-600">
            <p><strong>Next steps:</strong></p>
            <ul class="text-left max-w-md mx-auto space-y-1">
              <li>â€¢ Check your email for a confirmation message</li>
              <li>â€¢ We'll call or email to schedule your consultation</li>
              <li>â€¢ Your assessment score: ${this.currentScore.percentage}%</li>
            </ul>
          </div>
          <button 
            onclick="this.closest('[data-results-modal]').__modalInstance.close()"
            class="mt-6 bg-purple-600 hover:bg-purple-500 text-white font-semibold py-2 px-6 rounded-lg transition duration-300"
          >
            Close
          </button>
        </div>
      `;
    }

    showErrorMessage(message) {
      const content = this.container.querySelector('.results-content');
      if (!content) return;

      content.innerHTML = `
        <div class="text-center py-8">
          <div class="w-20 h-20 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4">
            <svg class="w-10 h-10 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
            </svg>
          </div>
          <h3 class="text-2xl font-bold text-red-900 mb-4">Submission Error</h3>
          <p class="text-red-700 mb-6">${message}</p>
          <div class="space-y-3">
            <p class="text-sm text-gray-600">
              <strong>You can also contact us directly:</strong><br>
              Email: wayne@disendarkenment.com<br>
              Phone: (904) 561-0301
            </p>
          </div>
          <button 
            onclick="this.closest('[data-results-modal]').__modalInstance.close()"
            class="mt-6 bg-red-600 hover:bg-red-500 text-white font-semibold py-2 px-6 rounded-lg transition duration-300"
          >
            Close
          </button>
        </div>
      `;
    }
  }

  // Initialize all results modals on the page
  document.addEventListener('DOMContentLoaded', () => {
    const containers = document.querySelectorAll('[data-results-modal]');
    containers.forEach(container => {
      container.__modalInstance = new ResultsModal(container);
    });
  });

  // Make it globally available
  window.ResultsModal = ResultsModal;
</script>