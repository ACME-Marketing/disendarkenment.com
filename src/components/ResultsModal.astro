---
export interface Props {
  triggerText?: string;
  triggerClass?: string;
}

const { 
  triggerText = "View Results", 
  triggerClass = "bg-green-600 hover:bg-green-500 text-white font-semibold py-3 px-6 rounded-lg transition duration-300"
} = Astro.props;
---

<div class="results-modal-container">
  <!-- Trigger Button (hidden by default) -->
  <button 
    class={`results-trigger ${triggerClass} hidden`}
    data-results-trigger
    aria-label="Open assessment results"
  >
    {triggerText}
  </button>

  <!-- Modal Overlay -->
  <div 
    class="results-modal-overlay fixed inset-0 bg-black bg-opacity-50 z-50 hidden items-center justify-center p-4"
    data-results-overlay
    role="dialog"
    aria-modal="true"
    aria-labelledby="results-title"
  >
    <div class="results-modal bg-white rounded-lg max-w-4xl w-full max-h-[90vh] overflow-hidden">
      <!-- Modal Header -->
      <div class="results-header bg-gradient-to-r from-green-600 to-blue-600 text-white p-6">
        <div class="flex justify-between items-center">
          <h2 id="results-title" class="text-2xl font-bold">Your Readiness Assessment Results</h2>
          <button 
            class="results-close text-white hover:text-gray-200 text-2xl font-bold"
            data-results-close
            aria-label="Close results"
          >
            Ã—
          </button>
        </div>
      </div>

      <!-- Modal Content -->
      <div class="results-content p-6 overflow-y-auto max-h-[calc(90vh-120px)]">
        <!-- Results will be dynamically loaded here -->
      </div>

      <!-- Modal Footer -->
      <div class="results-footer p-6 border-t border-gray-200">
        <div class="flex justify-between">
          <button 
            class="results-back bg-gray-200 hover:bg-gray-300 text-gray-700 font-semibold py-2 px-4 rounded-lg transition duration-300"
            data-results-back
          >
            Back to Quiz
          </button>
          <button 
            class="results-book bg-green-600 hover:bg-green-500 text-white font-semibold py-2 px-4 rounded-lg transition duration-300"
            data-results-book
          >
            Book Consultation
          </button>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  .results-modal-overlay {
    backdrop-filter: blur(4px);
  }
  
  .results-modal {
    animation: modalSlideIn 0.3s ease-out;
  }
  
  @keyframes modalSlideIn {
    from {
      opacity: 0;
      transform: translateY(-20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  .recommendation-card {
    transition: all 0.2s ease;
  }
  
  .recommendation-card:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }
</style>

<script>
  // @ts-nocheck
  import { calculateScore, formatScore, generateRecommendations } from '../lib/quiz-logic.js';

  class ResultsModal {
    constructor(container) {
      this.container = container;
      this.isOpen = false;
      this.currentScore = null;
      this.currentAnswers = null;
      
      this.init();
    }

    init() {
      this.bindEvents();
    }

    bindEvents() {
      // Trigger button
      const trigger = this.container.querySelector('[data-results-trigger]');
      trigger?.addEventListener('click', () => this.open());

      // Close button
      const closeBtn = this.container.querySelector('[data-results-close]');
      closeBtn?.addEventListener('click', () => this.close());

      // Overlay click to close
      const overlay = this.container.querySelector('[data-results-overlay]');
      overlay?.addEventListener('click', (e) => {
        if (e.target === overlay) this.close();
      });

      // Back button
      const backBtn = this.container.querySelector('[data-results-back]');
      backBtn?.addEventListener('click', () => this.backToQuiz());

      // Book consultation button
      const bookBtn = this.container.querySelector('[data-results-book]');
      bookBtn?.addEventListener('click', () => this.bookConsultation());

      // Keyboard navigation
      document.addEventListener('keydown', (e) => {
        if (!this.isOpen) return;
        
        if (e.key === 'Escape') this.close();
      });
    }

    open(scoreData = null, answers = null) {
      const overlay = this.container.querySelector('[data-results-overlay]');
      overlay?.classList.remove('hidden');
      overlay?.classList.add('flex');
      
      this.isOpen = true;
      this.currentScore = scoreData;
      this.currentAnswers = answers;
      
      if (scoreData && answers) {
        this.renderResults(scoreData, answers);
      } else {
        this.renderPlaceholder();
      }
      
      // Focus management
      const closeBtn = this.container.querySelector('[data-results-close]');
      closeBtn?.focus();
      
      // Prevent body scroll
      document.body.style.overflow = 'hidden';
    }

    close() {
      const overlay = this.container.querySelector('[data-results-overlay]');
      overlay?.classList.add('hidden');
      overlay?.classList.remove('flex');
      
      this.isOpen = false;
      
      // Restore body scroll
      document.body.style.overflow = '';
    }

    backToQuiz() {
      this.close();
      
      // Reopen quiz modal
      const quizModal = document.querySelector('[data-quiz-overlay]');
      if (quizModal) {
        const modal = quizModal.closest('.quiz-modal-container')?.__quizInstance;
        if (modal) {
          modal.open();
        }
      }
    }

    bookConsultation() {
      // Redirect to consultation booking
      window.location.href = '/contact?type=consultation';
    }

    renderResults(scoreData, answers) {
      const content = this.container.querySelector('.results-content');
      if (!content) return;

      const recommendations = generateRecommendations(answers);

      content.innerHTML = `
        <div class="results-container">
          <!-- Score Summary -->
          <div class="score-summary ${scoreData.level.bgColor} ${scoreData.level.color} p-6 rounded-lg mb-6">
            <div class="text-center">
              <div class="text-4xl font-bold mb-2">${scoreData.percentage}%</div>
              <div class="text-xl font-semibold mb-2">${scoreData.level.level} Readiness</div>
              <p class="text-sm">${scoreData.level.description}</p>
            </div>
          </div>

          <!-- Detailed Breakdown -->
          <div class="mb-6">
            <h3 class="text-xl font-semibold text-gray-900 mb-4">Detailed Breakdown</h3>
            <div class="grid md:grid-cols-2 gap-4">
              ${Object.entries(answers).map(([key, value]) => {
                const question = quizQuestions.find(q => q.id === key);
                if (!question) return '';
                
                const percentage = Math.round((value / 5) * 100);
                const color = percentage >= 80 ? 'text-green-600' : 
                             percentage >= 60 ? 'text-yellow-600' : 
                             percentage >= 40 ? 'text-orange-600' : 'text-red-600';
                
                return `
                  <div class="border border-gray-200 rounded-lg p-4">
                    <div class="flex justify-between items-center mb-2">
                      <span class="font-semibold text-gray-900">${question.category}</span>
                      <span class="${color} font-bold">${value}/5</span>
                    </div>
                    <div class="w-full bg-gray-200 rounded-full h-2">
                      <div class="bg-purple-600 h-2 rounded-full" style="width: ${percentage}%"></div>
                    </div>
                  </div>
                `;
              }).join('')}
            </div>
          </div>

          <!-- Recommendations -->
          <div class="mb-6">
            <h3 class="text-xl font-semibold text-gray-900 mb-4">Personalized Recommendations</h3>
            <div class="space-y-4">
              ${recommendations.map(rec => `
                <div class="recommendation-card border border-gray-200 rounded-lg p-4">
                  <div class="flex items-start">
                    <div class="flex-shrink-0">
                      <span class="inline-flex items-center justify-center w-8 h-8 rounded-full ${rec.priority === 'high' ? 'bg-red-100 text-red-600' : 'bg-yellow-100 text-yellow-600'} text-sm font-bold">
                        ${rec.priority === 'high' ? '!' : '?'}
                      </span>
                    </div>
                    <div class="ml-3">
                      <h4 class="font-semibold text-gray-900">${rec.category}</h4>
                      <p class="text-gray-600 text-sm mt-1">${rec.suggestion}</p>
                    </div>
                  </div>
                </div>
              `).join('')}
            </div>
          </div>

          <!-- Next Steps -->
          <div class="bg-blue-50 border border-blue-200 rounded-lg p-4">
            <h4 class="font-semibold text-blue-900 mb-2">Next Steps</h4>
            <p class="text-blue-700 text-sm">${scoreData.level.action}</p>
          </div>
        </div>
      `;
    }

    renderPlaceholder() {
      const content = this.container.querySelector('.results-content');
      if (!content) return;

      content.innerHTML = `
        <div class="text-center py-12">
          <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-purple-600 mx-auto mb-4"></div>
          <p class="text-gray-600">Loading your results...</p>
        </div>
      `;
    }

    openWithData(scoreData, answers) {
      this.open(scoreData, answers);
    }
  }

  // Initialize all results modals on the page
  document.addEventListener('DOMContentLoaded', () => {
    const containers = document.querySelectorAll('.results-modal-container');
    containers.forEach(container => {
      container.__resultsInstance = new ResultsModal(container);
    });
  });

  // Make it globally available
  window.ResultsModal = ResultsModal;
</script>